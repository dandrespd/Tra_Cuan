version: '3.9'

# ============================================
# REDES
# ============================================
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ============================================
# VOLÚMENES PERSISTENTES
# ============================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs-data:
    driver: local
  market-data:
    driver: local
  model-artifacts:
    driver: local

# ============================================
# SERVICIOS
# ============================================
services:
  # ------------------------------------------
  # Trading Bot Principal
  # ------------------------------------------
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.10
        - BUILD_ENV=production
    image: tradingbot-mt5:latest
    container_name: tradingbot-main
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=${TIMEZONE:-America/New_York}
    volumes:
      # Código fuente (solo en desarrollo)
      - ./:/app:ro
      # Datos persistentes
      - logs-data:/app/logs
      - market-data:/app/data_storage/market_data
      - model-artifacts:/app/data_storage/model_artifacts
      # MetaTrader 5 (Windows host)
      - /mnt/c/Program Files/MetaTrader 5:/mt5:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["python", "main.py", "--mode", "${TRADING_MODE:-paper}"]

  # ------------------------------------------
  # Dashboard Web (Streamlit)
  # ------------------------------------------
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    image: tradingbot-dashboard:latest
    container_name: tradingbot-dashboard
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    volumes:
      - ./visualization:/app/visualization:ro
      - ./data_storage:/app/data_storage:ro
      - logs-data:/app/logs:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.11
    depends_on:
      - trading-bot
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["streamlit", "run", "visualization/dashboard.py"]

  # ------------------------------------------
  # API REST (FastAPI)
  # ------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: tradingbot-api:latest
    container_name: tradingbot-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./api:/app/api:ro
      - logs-data:/app/logs
    networks:
      trading-network:
        ipv4_address: 172.28.0.12
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  # ------------------------------------------
  # PostgreSQL Database
  # ------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: tradingbot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-tradingbot}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_DB=${DB_NAME:-tradingbot_db}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tradingbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # ------------------------------------------
  # Redis Cache
  # ------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: tradingbot-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.21
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ------------------------------------------
  # MongoDB (Opcional)
  # ------------------------------------------
  mongodb:
    image: mongo:6-jammy
    container_name: tradingbot-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-secure_password}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-tradingbot}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb-data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.22
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    profiles:
      - full
      - mongodb

  # ------------------------------------------
  # Prometheus (Monitoreo)
  # ------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: tradingbot-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.30
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    profiles:
      - monitoring
      - full

  # ------------------------------------------
  # Grafana (Visualización de Métricas)
  # ------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: tradingbot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.31
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    profiles:
      - monitoring
      - full

  # ------------------------------------------
  # Nginx (Reverse Proxy)
  # ------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: tradingbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.40
    depends_on:
      - dashboard
      - api
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
      - full

  # ------------------------------------------
  # Celery Worker (Tareas Asíncronas)
  # ------------------------------------------
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: tradingbot-mt5:latest
    container_name: tradingbot-celery-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
    volumes:
      - ./:/app:ro
      - logs-data:/app/logs
      - model-artifacts:/app/data_storage/model_artifacts
    networks:
      trading-network:
        ipv4_address: 172.28.0.50
    depends_on:
      - redis
      - postgres
    command: ["celery", "-A", "core.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    profiles:
      - celery
      - full

  # ------------------------------------------
  # Celery Beat (Scheduler)
  # ------------------------------------------
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: tradingbot-mt5:latest
    container_name: tradingbot-celery-beat
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
    volumes:
      - ./:/app:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.51
    depends_on:
      - redis
      - postgres
    command: ["celery", "-A", "core.celery_app", "beat", "--loglevel=info"]
    profiles:
      - celery
      - full

  # ------------------------------------------
  # Flower (Celery Monitoring)
  # ------------------------------------------
  flower:
    image: mher/flower:latest
    container_name: tradingbot-flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      trading-network:
        ipv4_address: 172.28.0.52
    depends_on:
      - redis
    command: ["celery", "flower", "--broker=${CELERY_BROKER_URL:-redis://redis:6379/1}"]
    profiles:
      - celery
      - monitoring
      - full

  # ------------------------------------------
  # pgAdmin (PostgreSQL GUI)
  # ------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tradingbot-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@tradingbot.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      trading-network:
        ipv4_address: 172.28.0.60
    depends_on:
      - postgres
    profiles:
      - development
      - full

  # ------------------------------------------
  # Jupyter Lab (Análisis y Desarrollo)
  # ------------------------------------------
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    image: tradingbot-jupyter:latest
    container_name: tradingbot-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-tradingbot}
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./data_storage:/home/jovyan/data_storage:ro
      - model-artifacts:/home/jovyan/model_artifacts
    networks:
      trading-network:
        ipv4_address: 172.28.0.70
    depends_on:
      - postgres
      - redis
    profiles:
      - development
      - analysis

# ============================================
# PROFILES DE EJECUCIÓN
# ============================================
# Uso: docker-compose --profile <profile> up -d
#
# Profiles disponibles:
# - default: Solo servicios esenciales (bot, postgres, redis, dashboard)
# - development: Incluye pgAdmin y Jupyter
# - monitoring: Incluye Prometheus, Grafana y Flower
# - celery: Incluye workers de Celery
# - mongodb: Incluye MongoDB
# - analysis: Incluye Jupyter
# - production: Incluye Nginx
# - full: Todos los servicios